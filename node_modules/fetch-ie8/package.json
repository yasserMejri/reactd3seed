{
  "_args": [
    [
      {
        "raw": "fetch-ie8@^1.4.0",
        "scope": null,
        "escapedName": "fetch-ie8",
        "name": "fetch-ie8",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/home/ubunto/Documents/Work/finance/react-redux-d3-webpack-es6-seed/node_modules/universal-fetch"
    ]
  ],
  "_from": "fetch-ie8@>=1.4.0 <2.0.0",
  "_id": "fetch-ie8@1.5.0",
  "_inCache": true,
  "_location": "/fetch-ie8",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fetch-ie8-1.5.0.tgz_1488253330456_0.32290793815627694"
  },
  "_npmUser": {
    "name": "camsong",
    "email": "neosoyn@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fetch-ie8@^1.4.0",
    "scope": null,
    "escapedName": "fetch-ie8",
    "name": "fetch-ie8",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/universal-fetch"
  ],
  "_resolved": "https://registry.npmjs.org/fetch-ie8/-/fetch-ie8-1.5.0.tgz",
  "_shasum": "f1141c3f96cbc8937aa31b0fbc1a770220fbc15b",
  "_shrinkwrap": null,
  "_spec": "fetch-ie8@^1.4.0",
  "_where": "/home/ubunto/Documents/Work/finance/react-redux-d3-webpack-es6-seed/node_modules/universal-fetch",
  "bugs": {
    "url": "https://github.com/camsong/fetch/issues"
  },
  "dependencies": {},
  "description": "**This fork supports IE8 with es5-shim, es5-sham and es6-promise.**",
  "devDependencies": {
    "browserify": "^9.0.8",
    "es6-promise": "^2.1.1",
    "isarray": "0.0.1",
    "jshint": "2.5.2",
    "mocha": "2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f1141c3f96cbc8937aa31b0fbc1a770220fbc15b",
    "tarball": "https://registry.npmjs.org/fetch-ie8/-/fetch-ie8-1.5.0.tgz"
  },
  "files": [
    "LICENSE",
    "fetch.js"
  ],
  "gitHead": "44ce416c7bf110812b8fe73ca35ad9af89e9b67c",
  "homepage": "https://github.com/camsong/fetch#readme",
  "license": "MIT",
  "main": "fetch.js",
  "maintainers": [
    {
      "name": "camsong",
      "email": "neosoyn@gmail.com"
    }
  ],
  "name": "fetch-ie8",
  "optionalDependencies": {},
  "readme": "# window.fetch polyfill\n\n**This fork supports IE8 with es5-shim, es5-sham and es6-promise.**\n\n**If you also use JSONP, checkout [fetch-jsonp](https://github.com/camsong/fetch-jsonp).**\n\n**Fetch API is still very new and not fully supported in some browsers, so you may\nneed to check browser verson as well as if `window.fetch` exists. In this case,\nyou can set `window.__disableNativeFetch = true` to use AJAX polyfill always.**\n\nThe global `fetch` function is an easier way to make web requests and handle\nresponses than using an XMLHttpRequest. This polyfill is written as closely as\npossible to the standard Fetch specification at https://fetch.spec.whatwg.org.\n\n## Installation\n\n```sh\n$ npm install fetch-ie8 --save\n```\n\nYou'll also need a Promise polyfill for older browsers.\n\n```sh\n$ npm install es6-promise\n```\n\nRun this to polyfill the global environment at the beginning of your application.\n```js\nrequire('es6-promise').polyfill();\n```\n\n(For a node.js implementation, try [node-fetch](https://github.com/bitinn/node-fetch))\n\n## Usage\n\nThe `fetch` function supports any HTTP method. We'll focus on GET and POST\nexample requests.\n\n### HTML\n\n```javascript\nfetch('/users.html')\n  .then(function(response) {\n    return response.text()\n  }).then(function(body) {\n    document.body.innerHTML = body\n  })\n```\n\n### JSON\n\n```javascript\nfetch('/users.json')\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Response metadata\n\n```javascript\nfetch('/users.json').then(function(response) {\n  console.log(response.headers.get('Content-Type'))\n  console.log(response.headers.get('Date'))\n  console.log(response.status)\n  console.log(response.statusText)\n})\n```\n\n### Post form\n\n```javascript\nvar form = document.querySelector('form')\n\nfetch('/query', {\n  method: 'post',\n  body: new FormData(form)\n})\n```\n\n### Post JSON\n\n```javascript\nfetch('/users', {\n  method: 'post',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Hubot',\n    login: 'hubot',\n  })\n})\n```\n\n### File upload\n\n```javascript\nvar input = document.querySelector('input[type=\"file\"]')\n\nvar form = new FormData()\nform.append('file', input.files[0])\nform.append('user', 'hubot')\n\nfetch('/avatars', {\n  method: 'post',\n  body: form\n})\n```\n\n### Success and error handlers\n\nThis causes `fetch` to behave like jQuery's `$.ajax` by rejecting the `Promise`\non HTTP failure status codes like 404, 500, etc. The response `Promise` is\nresolved only on successful, 200 level, status codes.\n\n```javascript\nfunction status(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  }\n  throw new Error(response.statusText)\n}\n\nfunction json(response) {\n  return response.json()\n}\n\nfetch('/users')\n  .then(status)\n  .then(json)\n  .then(function(json) {\n    console.log('request succeeded with json response', json)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  })\n```\n\n### Response URL caveat\n\nThe `Response` object has a URL attribute for the final responded resource.\nUsually this is the same as the `Request` url, but in the case of a redirect,\nits all transparent. Newer versions of XHR include a `responseURL` attribute\nthat returns this value. But not every browser supports this. The compromise\nrequires setting a special server side header to tell the browser what URL it\njust requested (yeah, I know browsers).\n\n``` ruby\nresponse.headers['X-Request-URL'] = request.url\n```\n\nIf you want `response.url` to be reliable, you'll want to set this header. The\nday that you ditch this polyfill and use native fetch only, you can remove the\nheader hack.\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_7-8/internet-explorer_7-8_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png)\n--- | --- | --- | --- | --- |\nLatest ✔ | Latest ✔ | 8+ ✔ | Latest ✔ | 6.1+ ✔ |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/camsong/fetch.git"
  },
  "scripts": {},
  "version": "1.5.0"
}
